{"version":3,"sources":["Component/Card.js","Component/CardList.js","Component/Scroll.js","Component/SearchBox.js","Component/ErrorBoundry.js","Container/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","username","className","src","CardList","robots","map","item","i","Scroll","props","style","overflowY","border","height","children","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchRobot","event","searchField","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLowerCase","includes","length","StrictMode","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"yOAceA,MAZd,YAA0C,IAA1BC,EAAyB,EAAzBA,GAAGC,EAAsB,EAAtBA,KAAcC,GAAQ,EAAjBC,SAAiB,EAARD,OAC5B,OACA,sBAAKE,UAAU,sDAAf,UACE,qBAAKC,IAAG,+BAA0BL,EAA1B,cACR,gCACE,6BAAMC,IACN,4BAAIC,WCeCI,MApBf,YAA8B,IAAVC,EAAS,EAATA,OAChB,OACA,8BAEIA,EAAOC,KAAI,SAACC,EAAKC,GACf,OACE,cAAC,EAAD,CAEEV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBE,SAAUI,EAAOG,GAAGP,SACpBD,MAAOK,EAAOG,GAAGR,OAJZQ,SCAJC,MARf,SAAiBC,GACb,OACA,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACIJ,EAAMK,YCKCC,MARf,YAAqC,IAAhBC,EAAe,EAAfA,aACnB,OACE,qBAAKf,UAAU,MAAf,SACE,uBAAOA,UAAU,mCAAmCgB,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,OCiB/FI,E,kDAnBb,WAAYX,GAAO,IAAD,8BAChB,cAAMA,IACDY,MAAQ,CACXC,UAAW,GAHG,E,8DAOCC,EAAOC,GACtBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAI3B,OAAIG,KAAKJ,MAAMC,SACN,0DAEFG,KAAKhB,MAAMK,a,GAhBKa,aCiDVC,G,8DAzCf,aAAe,IAAD,8BACZ,gBAaFC,cAAgB,SAACC,GACf,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAbzC,EAAKZ,MAAO,CACVjB,OAAQ,GACR2B,YAAa,IAJH,E,gEAQM,IAAD,OACjBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAEtB,OAASkC,S,+BAOhC,IAAD,EACuBb,KAAKJ,MAA5BjB,EADA,EACAA,OAAQ2B,EADR,EACQA,YACTQ,EAAenC,EAAOoC,QAAO,SAAAC,GACnC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASZ,EAAYW,kBAErD,OAA0B,IAAlBtC,EAAOwC,OACX,oBAAI3C,UAAU,KAAd,qBAEE,sBAAKA,UAAU,KAAf,UACE,eAAC,IAAM4C,WAAP,WACE,oBAAI5C,UAAU,KAAd,wBACA,cAAC,EAAD,CAAWe,aAAcS,KAAKI,gBAC5B,cAAC,EAAD,UACE,cAAC,EAAD,UACC,cAAC,EAAD,CAAUzB,OAASmC,WAN5B,W,GA3BQZ,cCGEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,EAAD,IAAOC,SAASC,eAAe,SD4H3B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,c","file":"static/js/main.0e26a729.chunk.js","sourcesContent":["import React from 'react';\n\n function Card ({id,name,username,email}) {\n      return (\n      <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n        <img src={`https://robohash.org/${id}?200x200`}></img>\n        <div>\n          <h2 >{name}</h2>\n          <p>{email}</p>\n        </div>\n      </div>\n    );\n}\n\nexport default Card;\n","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nfunction CardList ({robots}) {\r\n    return (\r\n    <div>\r\n      {\r\n        robots.map((item,i)=>{\r\n          return(\r\n            <Card \r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              username={robots[i].username}\r\n              email={robots[i].email}\r\n            />\r\n          )\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React, { Children } from 'react';\r\n\r\nfunction Scroll (props) {\r\n    return (\r\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n      { props.children }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\n\r\nfunction SearchBox ({searchChange}) {\r\n  return (\r\n    <div className='pa2'>\r\n      <input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='Search robots' onChange={searchChange}></input>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      hasError : false\r\n    }\r\n  }\r\n\r\n  componentDidCatch (error, info) {\r\n      this.setState({hasError: true})\r\n  }\r\n\r\n  render () {\r\n    if (this.state.hasError) {\r\n      return <h1>Oooops. That is not good</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n} \r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport CardList from '../Component/CardList.js';\nimport Scroll from '../Component/Scroll.js';\nimport SearchBox from '../Component/SearchBox.js';\nimport ErrorBoundry from '../Component/ErrorBoundry.js';\nimport 'tachyons';\nimport './App.css';\n\nclass App extends Component {\n  constructor (){\n    super()\n    this.state ={  \n      robots: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ robots : users }));\n  }\n\n  onSearchRobot = (event) => {\n    this.setState({searchField: event.target.value}) \n  }\n\n  render() {\n    const {robots, searchField} = this.state;\n    const filterRobots = robots.filter(robot =>{\n    return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n    return (robots.length === 0) ?\n        <h1 className='f1'>Loading</h1> :\n    (\n          <div className='tc'>\n            <React.StrictMode>\n              <h1 className='f1'>RoboFriend</h1>\n              <SearchBox searchChange={this.onSearchRobot}/>\n                <Scroll>\n                  <ErrorBoundry>\n                   <CardList robots= {filterRobots}/>  \n                   </ErrorBoundry>\n                </Scroll>\n            </React.StrictMode>,\n          </div>\n        );\n    }\n}\n   \n  export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App/>,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}